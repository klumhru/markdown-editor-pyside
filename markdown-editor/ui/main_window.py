#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
ui.main_window
==============

This is a wrapper around the main window. This contains the
keyboard event handlers and main event loop wireups
"""
from __future__ import absolute_import, unicode_literals


from .editor import Ui_MainWindow
from PySide import QtGui as gui, QtCore as core

from markdown2 import Markdown


class ControlMainWindow(gui.QMainWindow):
    """
    This is the main window class. Called as the first window shown.

    Creates and runs UI_MainWindow from the autogenerated editor modules
    """
    def __init__(self, parent=None):
        super(ControlMainWindow, self).__init__(parent)
        self.markdown = Markdown()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.ui.txtInput.textChanged.connect(self.text_changed)
        self.wire_keys()

    def text_changed(self):
        raw = self.ui.txtInput.toPlainText()
        md = self.markdown.convert(raw)
        self.ui.txtOutput.setHtml(md)

    def keyPressEvent(self, ev):
        if ev.modifiers() & core.Qt.ControlModifier\
            and ev.key() in self.ctrl_keys:
            return self.ctrl_keys[ev.key()](ev)
        if ev.modifiers() & core.Qt.AltModifier and ev.key() in self.mod_keys:
            return self.mod_keys[ev.key()](ev)
        if ev.key() in self.keys:
            return self.keys[ev.key()](ev)

    def _help(self, ev):
        print "showing help"

    def _save(self, ev):
        print "saving file"

    def _open(self, ev):
        print "opening file"

    def wire_keys(self):
        self.ctrl_keys = {
            core.Qt.Key_S: self._save,
            core.Qt.Key_O: self._open,
        }
        self.mod_keys = {

        }
        self.keys = {
            core.Qt.Key_F1: self._help,
        }